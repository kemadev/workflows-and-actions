name: Issue comment dispatch
description: React to issue comments

author: kemadev
branding:
  icon: message-square
  color: blue

inputs:
  issue-number:
    description: Issue number
    required: true
  comment-id:
    description: Comment ID
    required: true
  comment-body:
    description: Comment body
    required: true

outputs:
  permission:
    description: Actor permissions
    value: ${{ steps.check-actor-permissions.outputs.permission }}
  command:
    description: Command
    value: ${{ steps.parse-comment-body.outputs.command }}
  args:
    description: Arguments
    value: ${{ steps.parse-comment-body.outputs.args }}
  continue:
    description: Continue
    value: ${{ steps.check-requirements.outputs.continue }}
  base_ref:
    description: Base ref
    value: ${{ steps.get-pr-infos.outputs.base_ref }}
  ref:
    description: Ref
    value: ${{ steps.get-pr-infos.outputs.ref }}
  sha:
    description: SHA
    value: ${{ steps.get-pr-infos.outputs.sha }}

runs:
  using: composite
  steps:
    - name: Notify message has been received
      id: notify-received
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ inputs.comment-id }}
        reactions-edit-mode: replace
        reactions: eyes
    - name: Check actor permissions
      id: check-actor-permissions
      uses: actions/github-script@v7
      with:
        script: |
          const { data: permissions } = await github.rest.repos.getCollaboratorPermissionLevel({
            owner: context.repo.owner,
            repo: context.repo.repo,
            username: context.actor
          });
          console.log(`Actor permissions are ${permissions.permission}`);
          core.setOutput('permission', permissions.permission);
          if (permissions.permission !== 'admin' && permissions.permission !== 'write') {
            core.setOutput('fail', 'Actor does not have required permissions');
            console.log('Actor does not have required permissions');
          }
    - name: Parse comment body
      id: parse-comment-body
      if: ${{ steps.check-actor-permissions.outputs.fail == '' }}
      uses: actions/github-script@v7
      with:
        script: |
          const commentBody = context.payload.comment.body;
          let [command, ...args] = commentBody.split(' ');
          if (command.startsWith('.')) {
            command = command.slice(1);
          } else {
            core.setOutput('fail', `Command ${command} does not start with .`);
          }
          console.log(`Command is ${command}`);
          core.setOutput('command', command);
          console.log(`Arguments are ${args}`);
          core.setOutput('args', args);
          const supportedCommands = ['preview', 'up'];
          if (!supportedCommands.includes(command)) {
            core.setOutput('fail', `Command ${command} is not supported`);
            console.log(`Command ${command} is not supported`);
          }
    - name: Get PR infos
      id: get-pr-infos
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.issue.number
          });
          console.log(`Base ref is ${pr.base.ref}`);
          core.setOutput('base_ref', pr.base.ref);
          console.log(`Ref is ${pr.head.ref}`);
          core.setOutput('ref', pr.head.ref);
          console.log(`SHA is ${pr.head.sha}`);
          core.setOutput('sha', pr.head.sha);
    - name: Check requirements
      id: check-requirements
      uses: actions/github-script@v7
      with:
        script: |
          const command = '${{ steps.parse-comment-body.outputs.command }}';
          console.log(`Command is ${command}`);
          const args = '${{ steps.parse-comment-body.outputs.args }}'.split(',');
          console.log(`Arguments are ${args}`);
          const baseRef = '${{ steps.get-pr-infos.outputs.base_ref }}';
          console.log(`Base ref is ${baseRef}`);
          const actorPermission = '${{ steps.check-actor-permissions.outputs.permission }}';
          console.log(`Actor permission is ${actorPermission}`);
          if (command === 'up' && baseRef === 'main') {
            console.log('Command is up and base ref is main, checking if force deployment is requested');
            console.log(args);
            console.log(args[0]);
            console.log(actorPermission);
            if (args[0] === '--force' && actorPermission === 'admin') {
              console.log('Force deployment requested by admin');
            } else {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.issue.number
              });
              if (pr.mergeable_state !== 'clean') {
                core.setOutput('fail', 'Pull request is not mergeable');
                console.log(`Pull request is not mergeable, got state ${pr.mergeable_state}`);
                return;
              }
            }
          }
          console.log('Requirements are met');
          core.setOutput('continue', 'true');
    - name: Notify message has been treated
      id: notify-treated
      if: ${{ steps.parse-comment-body.outputs.fail == '' && steps.check-requirements.outputs.fail == '' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ inputs.comment-id }}
        reactions-edit-mode: replace
        reactions: rocket
    - name: Notify message has failed
      id: notify-failed
      if: ${{ steps.parse-comment-body.outputs.fail != '' || steps.check-requirements.outputs.fail != '' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ inputs.comment-id }}
        reactions-edit-mode: replace
        reactions: confused
        edit-mode: append
        append-separator: newline
        body: |
          <!-- notify-failed -->

          ## Action failed :x:

          ${{ steps.parse-comment-body.outputs.fail != '' && steps.parse-comment-body.outputs.fail || steps.check-requirements.outputs.fail != '' && steps.check-requirements.outputs.fail }}
