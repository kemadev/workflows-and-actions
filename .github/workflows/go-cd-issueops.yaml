name: Go - CD IssueOps

on:
  issue_comment:
    types:
      - created
  workflow_call: {}

defaults:
  run:
    shell: bash

jobs:
  dispatch:
    name: Dispatch IssueOps commands
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      continue: ${{ steps.override-outputs.outputs.continue }}
      command: ${{ steps.override-outputs.outputs.command }}
      sha: ${{ steps.override-outputs.outputs.sha }}
      ref: ${{ steps.override-outputs.outputs.ref }}
      base_ref: ${{ steps.override-outputs.outputs.base_ref }}
      actor: ${{ steps.override-outputs.outputs.actor }}
      params: ${{ steps.override-outputs.outputs.params }}
      issue_number: ${{ steps.override-outputs.outputs.issue_number }}
    permissions:
      pull-requests: write
    steps:
      - name: Receive IssueOps preview command
        id: dispatch-issueops-preview-command
        uses: github/command@v2
        with:
          command: .preview
          param_separator: ' '
          skip_reviews: true
          skip_ci: true
          permissions: write,admin
          reaction: eyes
          failure_reaction: x
          success_reaction: rocket
      - name: Receive IssueOps up command
        id: dispatch-issueops-up-command
        if: ${{ steps.dispatch-issueops-preview-command.outputs.continue != 'true' }}
        uses: github/command@v2
        with:
          command: .up
          param_separator: ' '
          skip_reviews: true
          skip_ci: true
          permissions: write,admin
          reaction: eyes
          failure_reaction: x
          success_reaction: rocket
      - name: Override outputs
        id: override-outputs
        run: |
          if ${{ steps.dispatch-issueops-preview-command.outputs.continue == 'true' }} ; then
            echo "continue=true" >> "${GITHUB_OUTPUT}"
            echo "command=preview" >> "${GITHUB_OUTPUT}"
            echo "sha=${{ steps.dispatch-issueops-preview-command.outputs.sha }}" >> "${GITHUB_OUTPUT}"
            echo "ref=${{ steps.dispatch-issueops-preview-command.outputs.ref }}" >> "${GITHUB_OUTPUT}"
            echo "base_ref=${{ steps.dispatch-issueops-preview-command.outputs.base_ref }}" >> "${GITHUB_OUTPUT}"
            echo "actor=${{ steps.dispatch-issueops-preview-command.outputs.actor }}" >> "${GITHUB_OUTPUT}"
            echo "params=${{ steps.dispatch-issueops-preview-command.outputs.params }}" >> "${GITHUB_OUTPUT}"
            echo "issue_number=${{ steps.dispatch-issueops-preview-command.outputs.issue_number }}" >> "${GITHUB_OUTPUT}"
          elif ${{ steps.dispatch-issueops-up-command.outputs.continue == 'true' }} ; then
            echo "continue=true" >> "${GITHUB_OUTPUT}"
            echo "command=up" >> "${GITHUB_OUTPUT}"
            echo "sha=${{ steps.dispatch-issueops-up-command.outputs.sha }}" >> "${GITHUB_OUTPUT}"
            echo "ref=${{ steps.dispatch-issueops-up-command.outputs.ref }}" >> "${GITHUB_OUTPUT}"
            echo "base_ref=${{ steps.dispatch-issueops-up-command.outputs.base_ref }}" >> "${GITHUB_OUTPUT}"
            echo "actor=${{ steps.dispatch-issueops-up-command.outputs.actor }}" >> "${GITHUB_OUTPUT}"
            echo "params=${{ steps.dispatch-issueops-up-command.outputs.params }}" >> "${GITHUB_OUTPUT}"
            echo "issue_number=${{ steps.dispatch-issueops-up-command.outputs.issue_number }}" >> "${GITHUB_OUTPUT}"
          else
            echo "continue=false" >> "${GITHUB_OUTPUT}"
          fi

  start-deployment:
    name: Start deployment
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    needs:
      - dispatch
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.start-deployment.outputs.deployment_id }}
    permissions:
      pull-requests: write
      deployments: write
    steps:
      - name: Comment deploy start
        id: comment-deploy-start
        if: ${{ needs.dispatch.outputs.continue == 'true' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: append
          append-separator: newline
          body: |
            <!-- comment-deploy-start -->

            ## Deployment details :rocket:

            Deploying to **[${{ needs.dispatch.outputs.base_ref }}](../deployments/${{ needs.dispatch.outputs.base_ref }})**

            [Workflow run](../actions/runs/${{ github.run_id }})
      # Checkout is useful for {owner} and {repo} placeholders in gh api command
      - name: Checkout
        id: checkout
        if: ${{ needs.dispatch.outputs.continue == 'true' }}
        uses: actions/checkout@v4
      - name: Start deployment
        id: start-deployment
        if: ${{ needs.dispatch.outputs.continue == 'true' && needs.dispatch.outputs.command == 'up' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          declare ref
          ref="${{ needs.dispatch.outputs.ref }}"
          if [ -z "${ref}" ]; then
            echo "Failed to determine ref, got ${ref}"
            exit 1
          fi
          echo "Ref is ${ref}"
          declare target_env
          target_env="${{ needs.dispatch.outputs.base_ref }}"
          if [ -z "${target_env}" ]; then
            echo "Failed to determine target environment, got ${target_env}"
            exit 1
          fi
          echo "Target environment is ${target_env}"
          declare github_actor
          github_actor="${{ needs.dispatch.outputs.actor }}"
          if [ -z "${github_actor}" ]; then
            echo "Failed to determine GitHub actor, got ${github_actor}"
            exit 1
          fi
          echo "GitHub actor is ${github_actor}"
          declare repo
          repo="${{ github.repository }}"
          if [ -z "${repo}" ]; then
            echo "Failed to determine repository, got ${repo}"
            exit 1
          fi
          echo "Repository is ${repo}"
          declare pull_request_number
          pull_request_number="${{ needs.dispatch.outputs.issue_number }}"
          if [ -z "${pull_request_number}" ]; then
            echo "Failed to determine pull request number, got ${pull_request_number}"
            exit 1
          fi
          echo "Pull request number is ${pull_request_number}"
          declare deployment_id
          deployment_id="$(gh api \
            --jq '.id' \
            --method POST \
            repos/{owner}/{repo}/deployments \
            -f ref="${ref}" \
            -f task='deploy' \
            -f required_contexts\[\] \
            -f environment="${target_env}" \
            -f description="Deploy request from IssueOps, initiated by ${github_actor} on ${repo}#${pull_request_number}")"
          if [ -z "${deployment_id}" ]; then
            echo "Failed to start deployment"
            exit 1
          fi
          echo "Deployment started with ID ${deployment_id}"
          echo "deployment_id=${deployment_id}" >> "${GITHUB_OUTPUT}"
          echo "Set deployment ID to ${deployment_id}"

  build-code:
    name: Build code
    needs:
      - dispatch
      - start-deployment
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.dispatch.outputs.sha }}
          fetch-depth: 0
      - name: Build code
        id: build
        uses: kemadev/workflows-and-actions/.github/actions/go-build@main

  get-deploys-list:
    name: Get deploys list
    needs:
      - dispatch
      - start-deployment
      - build-code
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      deployment-dirs-list: ${{ steps.get-deploys-list.outputs.deployment-dirs-list }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.dispatch.outputs.sha }}
          fetch-depth: 0
      - name: Get deploys list
        id: get-deploys-list
        uses: kemadev/workflows-and-actions/.github/actions/go-get-deploys-list@main

  deploy:
    name: Deploy
    needs:
      - dispatch
      - start-deployment
      - get-deploys-list
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    concurrency:
      group: go-cd-${{ needs.dispatch.outputs.base_ref }}
    permissions:
      contents: read
      packages: read
      pull-requests: write
    runs-on: ubuntu-latest
    environment: ${{ needs.dispatch.outputs.base_ref }}
    strategy:
      matrix:
        deploy: ${{ fromJSON(needs.get-deploys-list.outputs.deployment-dirs-list) }}
      max-parallel: 1
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.dispatch.outputs.sha }}
      - name: Go deploy
        id: go-deploy
        uses: kemadev/workflows-and-actions/.github/actions/go-deploy@main
        with:
          command: ${{ needs.dispatch.outputs.params }}
          environment: ${{ needs.dispatch.outputs.base_ref }}
      - run: exit 1

  finish-deployment:
    name: Comment deploy end
    needs:
      - dispatch
      - start-deployment
      - deploy
    if: ${{ always() && needs.dispatch.outputs.continue == 'true' }}
    permissions:
      pull-requests:  write
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: Comment deploy end
        id: finish-deployment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: append
          append-separator: newline
          body: |
            <!-- finish-deployment -->

            Outcome is **${{ needs.deploy.result == 'success' && 'success :white_check_mark:' || 'failure :x:' }}**
      # Checkout is useful for {owner} and {repo} placeholders in gh api command
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Set deployment status
        id: set-deployment-status
        if: ${{ needs.dispatch.outputs.command == 'up' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          declare state
          state="${{ needs.deploy.result == 'success' && 'success' || 'failure' }}"
          if [ -z "${state}" ]; then
            echo "Failed to determine deployment status, got ${state}"
            exit 1
          fi
          echo "Deployment status is ${state}"
          declare deployment_id
          deployment_id="${{ needs.start-deployment.outputs.deployment_id }}"
          if [ -z "${deployment_id}" ]; then
            echo "Failed to determine deployment ID, got ${deployment_id}"
            exit 1
          fi
          gh api \
            --method POST \
            repos/{owner}/{repo}/deployments/${deployment_id}/statuses \
            -f state="${state}"
          echo "Deployment status set to ${state} for deployment ID ${deployment_id}"

  tag-deploy-success:
    name: Tag deploy success
    needs:
      - dispatch
      - deploy
    if: ${{ needs.dispatch.outputs.base_ref == 'main' && needs.dispatch.outputs.command == 'up' && needs.deploy.result == 'success' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Tag deploy success
        id: tag-deploy-success
        uses: kemadev/workflows-and-actions/.github/actions/tag-deploy-success@main
        with:
          deployed-ref: ${{ needs.dispatch.outputs.base_ref }}

  release:
    name: Release
    needs:
      - dispatch
      - deploy
      - tag-deploy-success
    if: ${{ needs.dispatch.outputs.base_ref == 'main' }}
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Release
        id: release
        uses: kemadev/workflows-and-actions/.github/actions/release@main

  prepare-rollback:
    name: Prepare rollback
    needs:
      - dispatch
      - deploy
    if: ${{ always() && needs.dispatch.outputs.command == 'up' && needs.deploy.result != 'success' }}
    permissions:
      contents: read
      packages: read
    outputs:
      deployment-dirs-list: ${{ steps.get-deploys-list.outputs.deployment-dirs-list }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout to latest sucessful deploy
        id: checkout-to-latest-sucessful-deploy
        uses: kemadev/workflows-and-actions/.github/actions/checkout-to-latest-successful-deploy@main
        with:
          force-rollback-to: ${{ github.event.inputs.force-rollback-to }}
      - name: Build code
        id: build
        uses: kemadev/workflows-and-actions/.github/actions/go-build@main
        with:
          artifact-name: rollback-build-outputs
      - name: Get deploys list
        id: get-deploys-list
        uses: kemadev/workflows-and-actions/.github/actions/go-get-deploys-list@main
        with:
          reverse: true

  rollback:
    name: Rollback
    needs:
      - prepare-rollback
    if: ${{ always() && needs.prepare-rollback.result == 'success' }}
    permissions:
      contents: read
      packages: read
      pull-requests: write
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    strategy:
      matrix:
        deploy: ${{ fromJSON(needs.prepare-rollback.outputs.deployment-dirs-list) }}
      max-parallel: 1
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout to latest sucessful deploy
        id: checkout-to-latest-sucessful-deploy
        uses: kemadev/workflows-and-actions/.github/actions/checkout-to-latest-successful-deploy@main
        with:
          force-rollback-to: ${{ github.event.inputs.force-rollback-to }}
      - name: Go deploy
        id: go-deploy
        uses: kemadev/workflows-and-actions/.github/actions/go-deploy@main
        with:
          build-artifact-name: rollback-build-outputs
