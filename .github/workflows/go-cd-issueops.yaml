name: Go - CD IssueOps

on:
  issue_comment:
    types:
      - created
  workflow_call: {}

defaults:
  run:
    shell: bash

jobs:
  dispatch:
    name: Dispatch IssueOps commands
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.override-outputs.outputs.sha }}
      ref: ${{ steps.override-outputs.outputs.ref }}
      base_ref: ${{ steps.override-outputs.outputs.base_ref }}
      params: ${{ steps.override-outputs.outputs.params }}
      continue: ${{ steps.override-outputs.outputs.continue }}
      command: ${{ steps.override-outputs.outputs.command }}
    permissions:
      pull-requests: write
    steps:
      # Checkout is useful for {owner} and {repo} placeholders in gh api command
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Get PR infos
        id: get-pr-infos
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          declare pr_infos
          pr_infos="$(gh api \
            repos/{owner}/{repo}/pulls/${{ github.event.issue.number }})"
          if [ -z "${pr_infos}" ]; then
            echo "Failed to determine PR infos, got ${pr_infos}"
            exit 1
          fi
          echo "PR infos are ${pr_infos}"
          declare base_ref
          base_ref="$(jq -r '.base.ref' <<< "${pr_infos}")"
          if [ -z "${base_ref}" ]; then
            echo "Failed to determine base ref, got ${base_ref}"
            exit 1
          fi
          echo "Base ref is ${base_ref}"
          echo "base_ref=${base_ref}" >> "${GITHUB_OUTPUT}"
          declare sha
          sha="$(jq -r '.head.sha' <<< "${pr_infos}")"
          if [ -z "${sha}" ]; then
            echo "Failed to determine sha, got ${sha}"
            exit 1
          fi
          echo "Sha is ${sha}"
          echo "sha=${sha}" >> "${GITHUB_OUTPUT}"
          declare ref
          ref="$(jq -r '.head.ref' <<< "${pr_infos}")"
          if [ -z "${ref}" ]; then
            echo "Failed to determine ref, got ${ref}"
            exit 1
          fi
          echo "Ref is ${ref}"
          echo "ref=${ref}" >> "${GITHUB_OUTPUT}"
          declare mergeable_state
          mergeable_state="$(jq -r '.mergeable_state' <<< "${pr_infos}")"
          if [ -z "${mergeable_state}" ]; then
            echo "Failed to determine mergeable state, got ${mergeable_state}"
            exit 1
          fi
          echo "Mergeable state is ${mergeable_state}"
          echo "mergeable_state=${mergeable_state}" >> "${GITHUB_OUTPUT}"
      - name: Parse command
        id: parse-command
        run: |
          declare valid
          declare command
          declare params
          command=(${{ github.event.comment.body }})
          if [ "${command[0]}" == ".preview" ]; then
            command=preview
            params=${command[@]:1}
            valid=true
          elif [ "${command[0]}" == ".up" ]; then
            command=up
            params=${command[@]:1}
            valid=true
          else
            command=unknown
            valid=false
          fi
          echo "command=${command}" >> "${GITHUB_OUTPUT}"
          for param in "${params[@]}"; do
            echo "${param}=${param}" >> "${GITHUB_OUTPUT}"
          done
          echo "params=${params}" >> "${GITHUB_OUTPUT}"
          echo "valid=${valid}" >> "${GITHUB_OUTPUT}"
      - name: Check requirements
        id: check-requirements
        if: ${{ steps.parse-command.outputs.valid == 'true' }}
        run: |
          # check if running on main branch
          if [ "${{ steps.get-pr-infos.outputs.base_ref }}" != 'main' ]; then
            echo "Not running with base branch main, skipping checks"
            echo "continue=true" >> "${GITHUB_OUTPUT}"
          fi
          if [ "${{ steps.get-pr-infos.outputs.mergeable_state }}" != 'clean' ]; then
            echo "PR is not mergeable, skipping checks"
            echo "continue=true" >> "${GITHUB_OUTPUT}"
          fi
      - name: Comment on non-continue
        id: comment-on-non-continue
        if: ${{ steps.check-requirements.outputs.continue != 'true' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: append
          append-separator: newline
          body: |
            <!-- comment-on-non-continue -->

            :warning: Invalid request, reason is **${{ steps.parse-command.outputs.valid != 'true' && 'invalid command' || 'PR is not mergeable' }}**

  start-deployment:
    name: Start deployment
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    needs:
      - dispatch
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.start-deployment.outputs.deployment_id }}
    permissions:
      pull-requests: write
      deployments: write
    steps:
      - name: Comment deploy start
        id: comment-deploy-start
        if: ${{ needs.dispatch.outputs.continue == 'true' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: append
          append-separator: newline
          body: |
            <!-- comment-deploy-start -->

            ## Deployment details :rocket:

            Deploying to **[${{ needs.dispatch.outputs.base_ref }}](../deployments/${{ needs.dispatch.outputs.base_ref }})**

            [Workflow run](../actions/runs/${{ github.run_id }})
      # Checkout is useful for {owner} and {repo} placeholders in gh api command
      - name: Checkout
        id: checkout
        if: ${{ needs.dispatch.outputs.continue == 'true' }}
        uses: actions/checkout@v4
      - name: Start deployment
        id: start-deployment
        if: ${{ needs.dispatch.outputs.continue == 'true' && needs.dispatch.outputs.command == 'up' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          declare ref
          ref="${{ needs.dispatch.outputs.ref }}"
          if [ -z "${ref}" ]; then
            echo "Failed to determine ref, got ${ref}"
            exit 1
          fi
          echo "Ref is ${ref}"
          declare target_env
          target_env="${{ needs.dispatch.outputs.base_ref }}"
          if [ -z "${target_env}" ]; then
            echo "Failed to determine target environment, got ${target_env}"
            exit 1
          fi
          echo "Target environment is ${target_env}"
          declare github_actor
          github_actor="${{ needs.dispatch.outputs.actor }}"
          if [ -z "${github_actor}" ]; then
            echo "Failed to determine GitHub actor, got ${github_actor}"
            exit 1
          fi
          echo "GitHub actor is ${github_actor}"
          declare repo
          repo="${{ github.repository }}"
          if [ -z "${repo}" ]; then
            echo "Failed to determine repository, got ${repo}"
            exit 1
          fi
          echo "Repository is ${repo}"
          declare pull_request_number
          pull_request_number="${{ needs.dispatch.outputs.issue_number }}"
          if [ -z "${pull_request_number}" ]; then
            echo "Failed to determine pull request number, got ${pull_request_number}"
            exit 1
          fi
          echo "Pull request number is ${pull_request_number}"
          declare deployment_id
          deployment_id="$(gh api \
            --jq '.id' \
            --method POST \
            repos/{owner}/{repo}/deployments \
            -f ref="${ref}" \
            -f task='deploy' \
            -f required_contexts\[\] \
            -f environment="${target_env}" \
            -f description="Deploy request from IssueOps, initiated by ${github_actor} on ${repo}#${pull_request_number}")"
          if [ -z "${deployment_id}" ]; then
            echo "Failed to start deployment"
            exit 1
          fi
          echo "Deployment started with ID ${deployment_id}"
          echo "deployment_id=${deployment_id}" >> "${GITHUB_OUTPUT}"
          echo "Set deployment ID to ${deployment_id}"

  build-code:
    name: Build code
    needs:
      - dispatch
      - start-deployment
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.dispatch.outputs.sha }}
          fetch-depth: 0
      - name: Build code
        id: build
        uses: kemadev/workflows-and-actions/.github/actions/go-build@main

  get-deploys-list:
    name: Get deploys list
    needs:
      - dispatch
      - start-deployment
      - build-code
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      deployment-dirs-list: ${{ steps.get-deploys-list.outputs.deployment-dirs-list }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.dispatch.outputs.sha }}
          fetch-depth: 0
      - name: Get deploys list
        id: get-deploys-list
        uses: kemadev/workflows-and-actions/.github/actions/go-get-deploys-list@main

  deploy:
    name: Deploy
    needs:
      - dispatch
      - start-deployment
      - get-deploys-list
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    concurrency:
      group: go-cd-${{ needs.dispatch.outputs.base_ref }}
    permissions:
      contents: read
      packages: read
      pull-requests: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deploy: ${{ fromJSON(needs.get-deploys-list.outputs.deployment-dirs-list) }}
      max-parallel: 1
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.dispatch.outputs.sha }}
      - name: Go deploy
        id: go-deploy
        uses: kemadev/workflows-and-actions/.github/actions/go-deploy@main
        with:
          command: ${{ needs.dispatch.outputs.params }}
          environment: ${{ needs.dispatch.outputs.base_ref }}
      - run: exit 1

  finish-deployment:
    name: Comment deploy end
    needs:
      - dispatch
      - start-deployment
      - deploy
    if: ${{ always() && needs.dispatch.outputs.continue == 'true' }}
    permissions:
      pull-requests:  write
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: Comment deploy end
        id: finish-deployment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: append
          append-separator: newline
          body: |
            <!-- finish-deployment -->

            Outcome is **${{ needs.deploy.result == 'success' && 'success :white_check_mark:' || 'failure :x:' }}**
      # Checkout is useful for {owner} and {repo} placeholders in gh api command
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Set deployment status
        id: set-deployment-status
        if: ${{ needs.dispatch.outputs.command == 'up' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          declare state
          state="${{ needs.deploy.result == 'success' && 'success' || 'failure' }}"
          if [ -z "${state}" ]; then
            echo "Failed to determine deployment status, got ${state}"
            exit 1
          fi
          echo "Deployment status is ${state}"
          declare deployment_id
          deployment_id="${{ needs.start-deployment.outputs.deployment_id }}"
          if [ -z "${deployment_id}" ]; then
            echo "Failed to determine deployment ID, got ${deployment_id}"
            exit 1
          fi
          gh api \
            --method POST \
            repos/{owner}/{repo}/deployments/${deployment_id}/statuses \
            -f state="${state}"
          echo "Deployment status set to ${state} for deployment ID ${deployment_id}"

  tag-deploy-success:
    name: Tag deploy success
    needs:
      - dispatch
      - deploy
    if: ${{ needs.dispatch.outputs.base_ref == 'main' && needs.dispatch.outputs.command == 'up' && needs.deploy.result == 'success' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Tag deploy success
        id: tag-deploy-success
        uses: kemadev/workflows-and-actions/.github/actions/tag-deploy-success@main
        with:
          deployed-ref: ${{ needs.dispatch.outputs.base_ref }}

  prepare-rollback:
    name: Prepare rollback
    needs:
      - dispatch
      - deploy
    if: ${{ always() && needs.dispatch.outputs.command == 'up' && needs.deploy.result != 'success' }}
    permissions:
      contents: read
      packages: read
    outputs:
      deployment-dirs-list: ${{ steps.get-deploys-list.outputs.deployment-dirs-list }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout to latest sucessful deploy
        id: checkout-to-latest-sucessful-deploy
        uses: kemadev/workflows-and-actions/.github/actions/checkout-to-latest-successful-deploy@main
      - name: Build code
        id: build
        uses: kemadev/workflows-and-actions/.github/actions/go-build@main
        with:
          artifact-name: rollback-build-outputs
      - name: Get deploys list
        id: get-deploys-list
        uses: kemadev/workflows-and-actions/.github/actions/go-get-deploys-list@main
        with:
          reverse: true

  rollback:
    name: Rollback
    needs:
      - dispatch
      - prepare-rollback
    if: ${{ always() && needs.prepare-rollback.result == 'success' }}
    permissions:
      contents: read
      packages: read
      pull-requests: write
    outputs:
      latest-deploy-tag: ${{ steps.checkout-to-latest-sucessful-deploy.outputs.latest-deploy-tag }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deploy: ${{ fromJSON(needs.prepare-rollback.outputs.deployment-dirs-list) }}
      max-parallel: 1
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ needs.dispatch.outputs.base_ref }}
      - name: Checkout to latest sucessful deploy
        id: checkout-to-latest-sucessful-deploy
        uses: kemadev/workflows-and-actions/.github/actions/checkout-to-latest-successful-deploy@main
      - name: Go deploy
        id: go-deploy
        uses: kemadev/workflows-and-actions/.github/actions/go-deploy@main
        with:
          build-artifact-name: rollback-build-outputs
          environment: ${{ needs.dispatch.outputs.base_ref }}

  comment-rollback:
    name: Comment rollback
    needs:
      - dispatch
      - rollback
    if: ${{ always() && needs.rollback.result == 'success' }}
    permissions:
      pull-requests:  write
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: Comment rollback
        id: comment-rollback
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: append
          append-separator: newline
          body: |
            <!-- comment-rollback -->

            :hourglass_flowing_sand: Rollback to [${{ needs.rollback.outputs.latest-deploy-tag }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.rollback.outputs.latest-deploy-tag }}) outcome is **${{ needs.rollback.result == 'success' && 'success :white_check_mark:' || 'failure :x:' }}**
