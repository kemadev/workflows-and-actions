name: Go - CD IssueOps

on:
  issue_comment:
    types:
      - created
  workflow_call: {}

concurrency:
  group: go-cd-issueops

defaults:
  run:
    shell: bash

jobs:
  dispatch:
    name: Dispatch IssueOps commands
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      continue: ${{ steps.dispatch-issueops-commands.outputs.continue }}
      sha: ${{ steps.dispatch-issueops-commands.outputs.sha }}
      base_ref: ${{ steps.dispatch-issueops-commands.outputs.base_ref }}
      params: ${{ steps.dispatch-issueops-commands.outputs.params }}
      target_env: ${{ steps.output-params.outputs.target_env }}
    permissions:
      pull-requests: write
      deployments: write
    steps:
      - name: Receive IssueOps commands
        id: dispatch-issueops-commands
        uses: github/command@v2
        with:
          command: .deploy
          param_separator: ' '
          skip_reviews: true
          skip_ci: true
          permissions: write,admin
          reaction: eyes
          failure_reaction: boom
          success_reaction: rocket
      - name: Output params
        id: output-params
        run: |
          echo "target_env=${{ github.base_ref == 'main' && 'next' || 'dev' }}" >> "${GITHUB_OUTPUT}"
      - name: Comment deploy start
        id: comment-deploy-start
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: append
          append-separator: newline
          body: |
            <!-- comment-deploy-start -->

            Deploying `${{ github.event.pull_request.head }}` to `${{ steps.output-params.outputs.target_env }}`!

            [Workflow run](../actions/runs/${{ github.run_id }})

  build-code:
    name: Build code
    needs: dispatch
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.dispatch.outputs.sha }}
          fetch-depth: 0
      - name: Build code
        id: build
        uses: kemadev/workflows-and-actions/.github/actions/go-build@main

  get-deploys-list:
    name: Get deploys list
    needs:
      - dispatch
      - build-code
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      deployment-dirs-list: ${{ steps.get-deploys-list.outputs.deployment-dirs-list }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.dispatch.outputs.sha }}
          fetch-depth: 0
      - name: Get deploys list
        id: get-deploys-list
        uses: kemadev/workflows-and-actions/.github/actions/go-get-deploys-list@main

  deploy:
    name: Deploy
    needs:
      - dispatch
      - get-deploys-list
    if: ${{ needs.dispatch.outputs.continue == 'true' }}
    permissions:
      contents: read
      packages: read
      pull-requests: write
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    strategy:
      matrix:
        deploy: ${{ fromJSON(needs.get-deploys-list.outputs.deployment-dirs-list) }}
      max-parallel: 1
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.dispatch.outputs.sha }}
      - name: Go deploy
        id: go-deploy
        uses: kemadev/workflows-and-actions/.github/actions/go-deploy@main
        with:
          command: ${{ needs.dispatch.outputs.params }}
          environment: ${{ needs.dispatch.outputs.target_env }}

  comment-deploy-end:
    name: Comment deploy end
    needs:
      - dispatch
      - deploy
    if: ${{ always() && needs.dispatch.outputs.continue == 'true' }}
    permissions:
      pull-requests:  write
    runs-on: ubuntu-latest
    steps:
      - name: Comment deploy end
        id: comment-deploy-end
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: append
          append-separator: newline
          body: |
            <!-- comment-deploy-end -->

            Outcome is **${{ job.status == 'success' && 'Success :white_check_mark:' || 'Failure :boom:' }}**
