name: Go - CI

on:
  schedule:
    # Each day at 3:00 AM
    - cron: 0 3 * * *
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened
      - unlocked
    paths:
      - '**go.mod'
      - '**go.sum'
      - '**.go'
  workflow_call: {}
  workflow_dispatch: {}

env:
  CGO_ENABLED: 0
  TEST_COVERAGE_ARTIFACT_NAME: test-coverage
  COVERAGE_FILE_NAME: coverage.out
  REUSABLE_CONFIGS_DIR: config/reusable

defaults:
  run:
    shell: bash

jobs:
  unit-test:
    name: Unit test
    permissions:
      contents: read
    runs-on: ubuntu-latest
    env:
      COVERAGE_FILE_PARENT_DIR: ./dist
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        id: setup-go
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Run Go tests
        id: test
        run: go test -bench=. -benchmem -covermode=atomic -coverprofile='${{ env.COVERAGE_FILE_PARENT_DIR }}/${{ env.COVERAGE_FILE_NAME }}' ./...
      - name: Upload test coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TEST_COVERAGE_ARTIFACT_NAME }}
          path: ${{ env.COVERAGE_FILE_PARENT_DIR }}
          if-no-files-found: error
          retention-days: 1

  report-test-coverage:
    name: Report test coverage
    needs: unit-test
    # Report only on PRs, don't run on forks or dependabot as they don't have write access to the repository
    if: github.event_name == 'pull_request' && ! github.event.pull_request.head.repo.fork
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    env:
      TEST_COVERAGE_SCRIPT_DIR: ./.github/script/reusable/report-test-coverage
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Checkout reusable workflow scripts and configs
        id: checkout-reusable-scripts-and-configs
        uses: kemadev/workflows-and-actions/.github/actions/checkout-reusable-scripts-and-configs@main
      - name: Set up Go
        uses: actions/setup-go@v5
        id: setup-go
        with:
          go-version-file: ${{ env.TEST_COVERAGE_SCRIPT_DIR }}/go.mod
          cache-dependency-path: ${{ env.TEST_COVERAGE_SCRIPT_DIR }}/go.sum
      - name: Download test coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.TEST_COVERAGE_ARTIFACT_NAME }}
          path: ${{ env.TEST_COVERAGE_SCRIPT_DIR }}
      - name: Report test coverage
        id: report-test-coverage
        working-directory: ${{ env.TEST_COVERAGE_SCRIPT_DIR }}
        env:
          COVERAGE_FILE: ./${{ env.COVERAGE_FILE_NAME }}
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          go run ./...

  check-clean-gomod:
    name: Clean go.mod
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        id: setup-go
        with:
          cache: false
      - name: Check for unused dependencies
        id: check-unused-deps
        run: |
          declare -a unused_deps=()
          find . -name go.mod -execdir go mod tidy \;
          declare git_status
          git_status="$(git status --porcelain)"
          if [ -n "${git_status}" ]; then
            for file in $(echo "${git_status}" | awk '{print $2}'); do
              if [[ "${file}" == *"go.mod" ]]; then
                unused_deps+=("$(git diff --name-only "${file}")")
                echo "::error file=${file}::Unused dependencies found in go.mod"
              fi
            done
          fi
          if [ ${#unused_deps[@]} -gt 0 ]; then
            exit 1
          fi

  check-gomod-name:
    name: Check go.mod name
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Check go.mod name
        id: check-go-mod-name
        run: |
          declare github_base_domain="${GITHUB_SERVER_URL/https:\/\//}"
          declare -a go_mod_file_bad_name=()
          declare -a go_mod_files
          mapfile -t go_mod_files < <(find . -name 'go.mod' | sed 's|./||')
          for go_mod_file in "${go_mod_files[@]}"; do
            go_mod_dir=$(dirname "${go_mod_file}" | sed 's|\.$||')
            go_mod_name=$(awk '/module/ {print $2}' "${go_mod_file}")
            expected_go_mod_name="$(echo "${github_base_domain}/${GITHUB_REPOSITORY}/${go_mod_dir}" | sed 's|/$||')"
            if [[ "${go_mod_name}" != "${expected_go_mod_name}" ]]; then
              echo "::error file=${go_mod_file}::go mod name should be ${expected_go_mod_name}"
              go_mod_file_bad_name+=("${go_mod_file}")
            fi
          done
          if [ ${#go_mod_file_bad_name[@]} -gt 0 ]; then
            exit 1
          fi

  lint:
    name: Lint
    permissions:
      contents: read
      checks: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        id: setup-go
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
      - name: Checkout reusable workflow scripts and configs
        id: checkout-reusable-scripts-and-configs
        uses: kemadev/workflows-and-actions/.github/actions/checkout-reusable-scripts-and-configs@main
      - name: Lint Go
        id: lint
        uses: golangci/golangci-lint-action@v6
        with:
          args: --config ${{ env.REUSABLE_CONFIGS_DIR }}/.golangci.yaml

  scan-dependencies:
    name: Scan dependencies
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Checkout reusable workflow scripts and configs
        id: checkout-reusable-scripts-and-configs
        uses: kemadev/workflows-and-actions/.github/actions/checkout-reusable-scripts-and-configs@main
      - name: Create SBOM
        uses: anchore/sbom-action@v0
        with:
          output-file: ${{ github.event.repository.name }}-sbom.spdx.json
          config: ${{ env.REUSABLE_CONFIGS_DIR }}/.syft.yaml
      - name: Scan SBOM
        uses: anchore/scan-action@v6
        env:
          GRYPE_CONFIG: ${{ env.REUSABLE_CONFIGS_DIR }}/.grype.yaml
        with:
          sbom: ${{ github.event.repository.name }}-sbom.spdx.json
          cache-db: true
          output-format: table
