name: Global - CI

on:
  pull_request: {}
  workflow_call: {}
  workflow_dispatch: {}

defaults:
  run:
    shell: bash

jobs:
  scan-secrets:
    name: Scan secrets
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Scan secrets
        uses: trufflesecurity/trufflehog@main

  scan-code:
    name: Scan code
    container:
      image: semgrep/semgrep
    if: github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Scan code
        env:
          FINDINGS_JSON_OUTPUT: ./dist/semgrep.json
        run: |
          declare scan_returned_findings=false
          semgrep scan --config auto --error --json-output "${FINDINGS_JSON_OUTPUT}" || scan_returned_findings=true
          if [ "${scan_returned_findings}" = true ]; then
            if [ -f "${FINDINGS_JSON_OUTPUT}" ]; then
              jq -r '.results[] | "::error file=\(.path),line=\(.start.line),col=\(.start.col),endLine=\(.end.line),endCol=\(.end.col)::\(.extra.message) - \(.check_id)"' "${FINDINGS_JSON_OUTPUT}"
            fi
            exit 1
          fi

  lint-code:
    name: Lint code
    permissions:
      contents: read
      pull-requests: write
      checks: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Super-linter
        id: super-linter
        uses: super-linter/super-linter/slim@v7.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_GITHUB_ACTIONS_STEP_SUMMARY: true
          VALIDATE_ALL_CODEBASE: true
          SAVE_SUPER_LINTER_OUTPUT: true

          VALIDATE_GIT_COMMITLINT: false
          VALIDATE_ANSIBLE: false
          VALIDATE_ARM: false
          # VALIDATE_BASH: true
          # VALIDATE_BASH_EXEC: true
          VALIDATE_CPP: false
          # VALIDATE_CHECKOV: true
          VALIDATE_CLANG_FORMAT: false
          VALIDATE_CLOJURE: false
          # VALIDATE_CLOUDFORMATION: true
          VALIDATE_COFFEESCRIPT: false
          VALIDATE_CSHARP: false
          # VALIDATE_CSS: true
          # VALIDATE_CSS_PRETTIER: true
          VALIDATE_DART: false
          # VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_DOTNET_SLN_FORMAT_ANALYZERS: false
          VALIDATE_DOTNET_SLN_FORMAT_STYLE: false
          VALIDATE_DOTNET_SLN_FORMAT_WHITESPACE: false
          # VALIDATE_EDITORCONFIG: true
          # VALIDATE_ENV: true
          VALIDATE_GHERKIN: false
          # VALIDATE_GIT_MERGE_CONFLICT_MARKERS: true
          # VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_GITLEAKS: false
          # VALIDATE_GO: true
          # VALIDATE_GO_MODULES: true
          # VALIDATE_GO_RELEASER: true
          # VALIDATE_GRAPHQL_PRETTIER: true
          VALIDATE_GOOGLE_JAVA_FORMAT: false
          VALIDATE_GROOVY: false
          VALIDATE_HTML: false
          VALIDATE_HTML_PRETTIER: false
          VALIDATE_JAVA: false
          VALIDATE_JAVASCRIPT_ES: false
          VALIDATE_JAVASCRIPT_PRETTIER: false
          VALIDATE_JAVASCRIPT_STANDARD: false
          VALIDATE_JSCPD: false
          # VALIDATE_JSON: true
          # VALIDATE_JSON_PRETTIER: true
          VALIDATE_JSONC: false
          VALIDATE_JSONC_PRETTIER: false
          VALIDATE_JSX: false
          VALIDATE_JSX_PRETTIER: false
          VALIDATE_JUPYTER_NBQA_BLACK: false
          VALIDATE_JUPYTER_NBQA_FLAKE8: false
          VALIDATE_JUPYTER_NBQA_ISORT: false
          VALIDATE_JUPYTER_NBQA_MYPY: false
          VALIDATE_JUPYTER_NBQA_PYLINT: false
          VALIDATE_JUPYTER_NBQA_RUFF: false
          VALIDATE_KOTLIN: false
          VALIDATE_KUBERNETES_KUBECONFORM: false
          VALIDATE_LATEX: false
          VALIDATE_LUA: false
          # VALIDATE_MARKDOWN: true
          # VALIDATE_MARKDOWN_PRETTIER: true
          VALIDATE_NATURAL_LANGUAGE: false
          # VALIDATE_OPENAPI: true
          VALIDATE_PERL: false
          VALIDATE_PHP: false
          VALIDATE_PHP_BUILTIN: false
          VALIDATE_PHP_PHPCS: false
          VALIDATE_PHP_PHPSTAN: false
          VALIDATE_PHP_PSALM: false
          VALIDATE_POWERSHELL: false
          # VALIDATE_PROTOBUF: true
          VALIDATE_PYTHON: false
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_PYTHON_FLAKE8: false
          VALIDATE_PYTHON_ISORT: false
          VALIDATE_PYTHON_MYPY: false
          VALIDATE_PYTHON_PYINK: false
          VALIDATE_PYTHON_PYLINT: false
          VALIDATE_PYTHON_RUFF: false
          VALIDATE_R: false
          VALIDATE_RAKU: false
          VALIDATE_RENOVATE: false
          VALIDATE_RUBY: false
          VALIDATE_RUST_2015: false
          VALIDATE_RUST_2018: false
          VALIDATE_RUST_2021: false
          VALIDATE_RUST_CLIPPY: false
          VALIDATE_SCALAFMT: false
          # VALIDATE_SHELL_SHFMT: true
          VALIDATE_SNAKEMAKE_LINT: false
          VALIDATE_SNAKEMAKE_SNAKEFMT: false
          # VALIDATE_STATES: true
          # VALIDATE_SQLFLUFF: true
          VALIDATE_TEKTON: false
          VALIDATE_TERRAFORM_FMT: false
          VALIDATE_TERRAFORM_TERRASCAN: false
          VALIDATE_TERRAFORM_TFLINT: false
          VALIDATE_TERRAGRUNT: false
          VALIDATE_TSX: false
          VALIDATE_TYPESCRIPT_ES: false
          VALIDATE_TYPESCRIPT_PRETTIER: false
          VALIDATE_TYPESCRIPT_STANDARD: false
          VALIDATE_VUE_PRETTIER: false
          VALIDATE_XML: false
          # VALIDATE_YAML: true
          # VALIDATE_YAML_PRETTIER: true
      - name: Annotate Super-linter findings
        if: failure()
        run: |
          ls -Rla super-linter-output
