name: Go - CD

on:
  push:
    branches:
      - main
      - next
      # dev is deployed manually by developers on their local machines
    paths:
      - '**go.mod'
      - '**go.sum'
      - '**.go'
  workflow_call:
    inputs:
      force-patch:
        description: Force new patch version, creating a new tag and release
        type: boolean
        default: false
        required: false
      force-rollback:
        description: Force rollback to specified git reference (use `latest` for latest successful deploy)
        type: string
        default: ''
        required: false
  workflow_dispatch:
    inputs:
      force-patch:
        description: Force new patch version, creating a new tag and release
        type: boolean
        default: false
        required: false
      force-rollback:
        description: Force rollback to specified git reference (use `latest` for latest successful deploy)
        type: string
        default: ''
        required: false

env:
  TAG_VERSION_SCRIPT_NAME: output-tag-next-semver.go
  ARTIFACT_NAME: build-outputs
  DEPLOYS_DIR: ./deploy
  GORELEASER_DIST_DIR: ./dist/goreleaser
  GHA_BOT_NAME: github-actions[bot]
  GHA_BOT_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
  GIT_DEPLOYMENT_SUCCESS_TAG_PREFIX: deploy-success-
  GORELEASER_RENDER_CONFIG_SCRIPT_DIR: .github/script/reusable/render-goreleaser-config
  GORELEASER_CONFIG_TEMPLATE_DIR: config/reusable
  GORELEASER_CONFIG_OUTPUT_FILE: config/reusable/.goreleaser.yaml
  BUILDS_DIR: cmd
  RELEASE_PLEASE_CONFIG_FILE: config/release-please/release-please-config.json

concurrency:
  group: ${{ github.ref_name }}

defaults:
  run:
    shell: bash

jobs:
  build-code:
    name: Build code
    if: ${{ github.event.inputs.force-rollback == '' }}
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build code
        id: build
        uses: kemadev/workflows-and-actions/.github/actions/go-build@main
        with:
          artifact-name: ${{ env.ARTIFACT_NAME }}
          goreleaser-render-config-script-dir: ${{ env.GORELEASER_RENDER_CONFIG_SCRIPT_DIR }}
          goreleaser-dist-dir: ${{ env.GORELEASER_DIST_DIR }}

  get-deploys-list:
    name: Get deploys list
    needs: build-code
    if: ${{ github.event.inputs.force-rollback != '' || success() }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      DEPLOYS_LIST: ${{ steps.get-deploys-list.outputs.DEPLOYS_LIST }}
      DEPLOYS_LIST_REVERSE: ${{ steps.get-deploys-list.outputs.DEPLOYS_LIST_REVERSE }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Get deploys list
        id: get-deploys-list
        uses: kemadev/workflows-and-actions/.github/actions/go-get-deploys-list@main
        with:
          deploys-base-dir: ${{ env.DEPLOYS_DIR }}

  deploy:
    name: Deploy
    needs: get-deploys-list
    if: ${{ github.event.inputs.force-rollback == '' }}
    permissions:
      contents: read
      packages: read
      pull-requests: write
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    strategy:
      # Run sequentially in alphabetical order
      matrix:
        deploy: ${{ fromJSON(needs.get-deploys-list.outputs.DEPLOYS_LIST) }}
      max-parallel: 1
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Go deploy
        id: go-deploy
        uses: kemadev/workflows-and-actions/.github/actions/go-deploy@main
        with:
          build-artifact-name: ${{ env.ARTIFACT_NAME }}
          build-artifact-dir: ${{ env.GORELEASER_DIST_DIR }}
          deploys-base-dir: ${{ env.DEPLOYS_DIR }}

  tag-deploy-success:
    name: Tag deploy success
    needs:
      - deploy
    if: ${{ needs.deploy.result == 'success' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Tag deploy success
        id: tag-deploy-success
        uses: kemadev/workflows-and-actions/.github/actions/tag-deploy-success@main

  release:
    name: Release
    needs: tag-deploy-success
    if: ${{ github.event.inputs.force-rollback == '' }}
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Release
        id: release
        uses: kemadev/workflows-and-actions/.github/actions/release@main
        with:
          artifact-name: ${{ env.ARTIFACT_NAME }}
          goreleaser-dist-dir: ${{ env.GORELEASER_DIST_DIR }}
          release-please-config-file: ${{ env.RELEASE_PLEASE_CONFIG_FILE }}

  rollback:
    name: Rollback
    needs:
      - get-deploys-list
      - deploy
    if: ${{ github.event.inputs.force-rollback != '' || failure() }}
    permissions:
      contents: read
      packages: read
      pull-requests: write
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    strategy:
      # Run sequentially in reverse alphabetical order
      matrix:
        deploy: ${{ fromJSON(needs.get-deploys-list.outputs.DEPLOYS_LIST_REVERSE) }}
      max-parallel: 1
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Checkout reusable workflow scripts and configs
        id: checkout-reusable-scripts-and-configs
        uses: kemadev/workflows-and-actions/.github/actions/checkout-reusable-scripts-and-configs@main
      - name: Checkout to latest sucessful deploy
        id: checkout-to-latest-sucessful-deploy
        env:
          GITHUB_REF: ${{ github.ref_name }}
          FORCE_ROLLBACK: ${{ github.event.inputs.force-rollback }}
        run: |
          export checkout_target=""
          if [ "${FORCE_ROLLBACK}" == "latest" ]; then
            checkout_target="$(git tag --list "${{ env.GIT_DEPLOYMENT_SUCCESS_TAG_PREFIX }}${GITHUB_REF}-*" | sort -V | tail -n 1)"
          else
            checkout_target="${FORCE_ROLLBACK}"
          fi
          git checkout "${checkout_target}"
      - name: Set up Go
        id: setup-go-goreleaser
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ env.GORELEASER_RENDER_CONFIG_SCRIPT_DIR }}/go.mod
          cache-dependency-path: ${{ env.GORELEASER_RENDER_CONFIG_SCRIPT_DIR }}/go.sum
      - name: Render goreleaser config
        id: render-goreleaser-config
        env:
          GORELEASER_CONFIG_TEMPLATE_DIR: ${{ github.workspace }}/config/reusable
          GORELEASER_CONFIG_TEMPLATE_FILENAME: .goreleaser.yaml.go.tmpl
          GORELEASER_CONFIG_OUTPUT_FILE: ${{ github.workspace }}/config/reusable/.goreleaser.yaml
          BUILDS_DIR_PARENT: ${{ github.workspace }}
        working-directory: ${{ env.GORELEASER_RENDER_CONFIG_SCRIPT_DIR }}
        run: |
          mkdir -p ${{ env.GORELEASER_CONFIG_TEMPLATE_DIR }}
          go run ./...
      - name: Build code
        id: build
        uses: goreleaser/goreleaser-action@v6
        with:
          args: build --config ${{ env.GORELEASER_CONFIG_OUTPUT_FILE }} --clean --snapshot
        env:
          # HACK make goreleaser think it's a new version and generate all artifacts
          GORELEASER_PREVIOUS_TAG: v0.0.0-dummy
          GORELEASER_CURRENT_TAG: v0.0.1-dummy
      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ env.DEPLOYS_DIR }}/${{ matrix.deploy }}/go.mod
          cache-dependency-path: ${{ env.DEPLOYS_DIR }}/${{ matrix.deploy }}/go.sum
      # - name: Configure AWS credentials
      #   id: configure-aws-credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   continue-on-error: false
      #   with:
      #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     role-session-name: gha-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_id }}
      #     mask-aws-account-id: true
      #   timeout-minutes: 1
      # - name: Rollback Cloud resources
      #   id: rollback-cloud-resources
      #   uses: pulumi/actions@v6
      #   with:
      #     command: up
      #     work-dir: ${{ env.DEPLOYS_DIR }}/${{ matrix.deploy }}
      #     comment-on-pr: true
      #     comment-on-summary: true
      #     stack-name: ${{ github.ref_name }}
      #     github-token: ${{ github.token }}
