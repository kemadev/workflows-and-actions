package main

import (
	"bytes"
	"context"
	"fmt"
	"log/slog"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"time"

	"github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/plumbing"
	"github.com/google/go-github/v69/github"
)

const (
	outputFile          = "./dist/stale_issue_body.md"
	issueTitle          = ":broom: Stale branches"
	issueBodyIdentifier = "<!-- gha:report-stale-branches -->"
)

type staleBranch struct {
	name                string
	author              string
	date                string
	timeSinceLastCommit string
}

var (
	gh                      *github.Client
	githubRepository        = os.Getenv("GITHUB_REPOSITORY")
	repoOwner               string
	repoName                string
	ghToken                 = os.Getenv("GH_TOKEN")
	issueBody               string
	repo                    *git.Repository
	staleBranches           []staleBranch
	daysBeforeStale         = 30
	atLeastOneBranchIsStale = false
)

func initLogger() {
	var logLevel slog.Level
	if os.Getenv("ACTIONS_RUNNER_DEBUG") == "true" {
		logLevel = slog.LevelDebug
	} else {
		logLevel = slog.LevelInfo
	}
	slog.SetDefault(slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: logLevel})))
}

func checkAndSetVariables() {
	slog.Debug("START checkAndSetVariables")
	if githubRepository == "" {
		slog.Error("GITHUB_REPOSITORY is not set")
		os.Exit(1)
	}
	repoOwner = strings.Split(githubRepository, "/")[0]
	repoName = strings.Split(githubRepository, "/")[1]
	if ghToken == "" {
		slog.Error("GH_TOKEN is not set")
		os.Exit(1)
	}
	if days, exists := os.LookupEnv("DAYS_BEFORE_STALE"); exists {
		daysBeforeStale, _ = strconv.Atoi(days)
	}
	slog.Debug("END checkAndSetVariables", slog.Group("variables", slog.Any("githubRepository", githubRepository), slog.Int("daysBeforeStale", daysBeforeStale)))
}

func initGithubClient() {
	slog.Debug("START initGithubClient")
	gh = github.NewClient(nil).WithAuthToken(ghToken)
	slog.Debug("END initGithubClient")
}

func initGitClient() {
	slog.Debug("START initGitClient")
	r, err := git.PlainOpenWithOptions(".", &git.PlainOpenOptions{DetectDotGit: true})
	if err != nil {
		slog.Error("Failed to open git repository", slog.String("error", err.Error()))
		os.Exit(1)
	}
	repo = r
	slog.Debug("END initGitClient")
}

func listStaleBranches() {
	slog.Debug("START listStaleBranches")
	head, err := repo.Head()
	if err != nil {
		slog.Error("Failed to get HEAD", slog.String("error", err.Error()))
		os.Exit(1)
	}
	currentBranch := head.Name()
	slog.Info("Current branch", slog.String("currentBranch", currentBranch.Short()))
	branches, err := repo.Branches()
	if err != nil {
		slog.Error("Failed to get branches", slog.String("error", err.Error()))
		os.Exit(1)
	}

	err = branches.ForEach(func(branch *plumbing.Reference) error {
		if branch.Name() != currentBranch {
			cIter, err := repo.Log(&git.LogOptions{From: branch.Hash()})
			if err != nil {
				slog.Error("Failed to get commits", slog.String("error", err.Error()))
				os.Exit(1)
			}
			commits, err := cIter.Next()
			if err != nil {
				slog.Error("Failed to get commit", slog.String("error", err.Error()))
				os.Exit(1)
			}
			lastCommitDate := commits.Author.When.Format("2006-01-02")
			daysSinceLastCommit := time.Since(commits.Author.When).Hours() / 24
			if daysSinceLastCommit >= float64(daysBeforeStale) {
				atLeastOneBranchIsStale = true
				author := commits.Author.Name

				staleBranches = append(staleBranches, staleBranch{name: branch.Name().Short(), author: author, date: lastCommitDate, timeSinceLastCommit: strconv.Itoa(int(daysSinceLastCommit))})
				slog.Info("Stale branch found", slog.String("branch", branch.Name().Short()), slog.String("author", author), slog.String("lastCommitDate", lastCommitDate), slog.String("timeSinceLastCommit", strconv.Itoa(int(daysSinceLastCommit))))
			}
		}
		return nil
	})
	if err != nil {
		slog.Error("Failed to iterate branches", slog.String("error", err.Error()))
		os.Exit(1)
	}
	slog.Debug("END listStaleBranches", slog.Group("staleBranches", slog.Any("staleBranches", staleBranches)))
}

func computeIssueBody() {
	slog.Debug("START computeIssueBody")
	var buffer bytes.Buffer
	buffer.WriteString(issueBodyIdentifier + "\n")
	buffer.WriteString("<!-- This issue is auto-generated by a workflow, do not edit manually -->\n")
	if !atLeastOneBranchIsStale {
		buffer.WriteString("## ðŸŽ‰ No stale branch found\n")
	} else {
		buffer.WriteString("## ðŸ§¹ Consider deleting the following stale branches\n\n")
		buffer.WriteString("> [!TIP]\n")
		buffer.WriteString("> Deleted branches can be restored anytime from [here](../activity?activity_type=branch_deletion)\n\n")
		buffer.WriteString("| Branch Name | Author | Last Commit Date |\n")
		buffer.WriteString("| ----------- | ------ | ---------------- |\n")
		for i, branch := range staleBranches {
			branchNameWithLink := fmt.Sprintf("[%s](https://github.com/%s/tree/%s)", branch.name, githubRepository, branch.name)
			buffer.WriteString(fmt.Sprintf("| %s | @%s | %s (%s days) |\n", branchNameWithLink, staleBranches[i].author, staleBranches[i].date, staleBranches[i].timeSinceLastCommit))
		}
		buffer.WriteString("\n> [!NOTE]\n")
		buffer.WriteString("> Author might not be relevant if the committer did not configure git to use their GitHub username.\n")
	}
	issueBody = buffer.String()
	slog.Info("Issue body computed", slog.String("issueBody", issueBody))
	slog.Debug("END computeIssueBody", slog.String("issueBody", issueBody))
}

func createOrUpdateIssue() {
	slog.Debug("START createOrUpdateIssue")
	issueNumber := getIssueNumber()
	if issueNumber == -1 {
		slog.Info("Issue not found, creating a new one")
		issueNumber = createIssue()
		slog.Info("Issue created", slog.Int("issueNumber", issueNumber))
	} else {
		updateIssue(issueNumber)
	}
	pinIssue(issueNumber)
	slog.Debug("END createOrUpdateIssue", slog.Int("issueNumber", issueNumber))
}

func main() {
	startTime := time.Now()
	defer func() {
		slog.Info("Execution time", slog.String("duration", time.Since(startTime).String()))
	}()
	initLogger()
	checkAndSetVariables()
	initGithubClient()
	initGitClient()
	listStaleBranches()
	computeIssueBody()
	createOrUpdateIssue()
	slog.Info("Workflow completed successfully")
}

func getIssueNumber() int {
	slog.Debug("START getIssueNumber")
	issues, resp, err := gh.Search.Issues(context.TODO(), "is:issue in:title "+issueTitle+" repo:"+githubRepository, nil)
	if err != nil {
		slog.Error("Failed to get issue number", slog.String("error", err.Error()))
		os.Exit(1)
	}
	if resp.StatusCode != 200 {
		slog.Error("Failed to get issue number", slog.String("status", resp.Status))
		os.Exit(1)
	}
	issueNumber := -1
	for _, issue := range issues.Issues {
		if strings.Contains(issue.GetBody(), issueBodyIdentifier) {
			issueNumber = issue.GetNumber()
			slog.Info("Issue found", slog.Int("issueNumber", issueNumber))
			break
		}
	}
	slog.Debug("END getIssueNumber", slog.Int("issueNumber", issueNumber))
	return issueNumber
}

func createIssue() int {
	slog.Debug("START createIssue")
	i := github.IssueRequest{
		Title: github.Ptr(issueTitle),
		Body:  &issueBody,
	}
	issue, resp, err := gh.Issues.Create(context.TODO(), repoOwner, repoName, &i)
	if err != nil {
		slog.Error("Failed to create issue", slog.String("error", err.Error()))
		os.Exit(1)
	}
	if resp.StatusCode != 201 {
		slog.Error("Failed to create issue", slog.String("status", resp.Status))
		os.Exit(1)
	}
	issueNumber := issue.GetNumber()
	slog.Debug("END createIssue", slog.Int("issueNumber", issueNumber))
	return issueNumber
}

func updateIssue(issueNumber int) {
	slog.Debug("START updateIssue")
	var issueDesiredStatus string
	if atLeastOneBranchIsStale {
		issueDesiredStatus = "open"
	} else {
		issueDesiredStatus = "closed"
	}
	i := github.IssueRequest{
		Body:  &issueBody,
		State: github.Ptr(issueDesiredStatus),
	}
	_, resp, err := gh.Issues.Edit(context.TODO(), repoOwner, repoName, issueNumber, &i)
	if err != nil {
		slog.Error("Failed to update issue", slog.String("error", err.Error()))
		os.Exit(1)
	}
	if resp.StatusCode != 200 {
		slog.Error("Failed to update issue", slog.String("status", resp.Status))
		os.Exit(1)
	}
	slog.Info("Issue updated", slog.Int("issueNumber", issueNumber))
	slog.Debug("END updateIssue")
}

func pinIssue(issueNumber int) {
	slog.Debug("START pinIssue")
	exec.Command("gh", "issue", "pin", strconv.Itoa(issueNumber)).Run()
	slog.Info("Issue pinned", slog.Int("issueNumber", issueNumber))
	slog.Debug("END pinIssue")
}
