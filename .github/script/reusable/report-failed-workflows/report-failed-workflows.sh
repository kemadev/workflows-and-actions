#!/usr/bin/env bash

# Used in .github/workflows/report-failed-workflows.yaml

# NOTE This script has not been ported to Go yet, as GitHub's GraphQL API lacks a good Go client library

function check_and_set_variables {
	if [ -z "${GITHUB_REPOSITORY:-}" ]; then
		echo "GITHUB_REPOSITORY is not set"
		exit 1
	fi
	if [ -z "${URL:-}" ]; then
		echo "URL is not set"
		exit 1
	fi
	if [ -z "${NAME:-}" ]; then
		echo "NAME is not set"
		exit 1
	fi
	if [ -z "${CONCLUSION:-}" ]; then
		echo "CONCLUSION is not set"
		exit 1
	fi
	if [ -z "${HEAD_BRANCH:-}" ]; then
		echo "HEAD_BRANCH is not set"
		exit 1
	fi
	export output_file="./dist/failed-workflows.md"
	export issue_title=":rotating_light: Failed workflows"
	export issue_body_identifier="<!-- gha:report-failed-workflows -->"
}

function compute_issue_body {
	mkdir -p "$(dirname "${output_file}")"
	{
		echo "${issue_body_identifier}"
		echo "<!-- This issue is auto-generated by a workflow, do not edit manually -->"
		if [ "${at_least_one_branch_is_stale}" -ne 0 ]; then
			echo "## ðŸŽ‰ No stale branch found"
		else
			echo "## ðŸ§¹ Consider deleting the following stale branches"
			echo ""
			echo "> [!TIP]"
			echo "> Deleted branches can be restored anytime from [here](../activity?activity_type=branch_deletion)"
			echo ""
			echo "| Branch Name | Author | Last Commit Date |"
			echo "|-------------|--------|------------------|"
			declare -i pos=0
			for branch in "${stale_branches_names[@]}"; do
				local branch_name
				branch_name="${stale_branches_names[${pos}]}"
				local branch_name_with_link
				branch_name_with_link="[${branch_name}](https://github.com/${GITHUB_REPOSITORY}/tree/${branch_name})"
				local author
				author="${stale_branches_authors[${pos}]}"
				local last_commit_date
				last_commit_date="${stale_branches_dates[${pos}]}"
				echo "| ${branch_name_with_link} | @${author} | ${last_commit_date} |"
				pos+=1
			done
			echo ""
			echo "> [!NOTE]"
			echo "> Author might not be relevant if the commiter did not configure git to use their GitHub username."
		fi
	} >"${output_file}"
}

function create_or_update_issue {
	local issue_number
	issue_number="$(gh api graphql -f query='
{
	search(query: "repo:'"${GITHUB_REPOSITORY}"' in:body '"${issue_body_identifier}"' in:title '"${issue_title}"'", type: ISSUE, first: 100) {
		edges {
			node {
				... on Issue {
					title
					body
					state
					number
				}
			}
		}
	}
}' | jq -r '.data.search.edges[0].node.number')"
	if [ "${issue_number}" == "null" ]; then
		issue_number="$(gh issue create --title "${issue_title}" -F "${output_file}" | grep -oP '(?<=/issues/)\d+')"
	else
		gh issue edit "${issue_number}" -F "${output_file}"
	fi
	gh issue pin "${issue_number}"
	local issue_status
	issue_status="$(gh issue view "${issue_number}" --json state --jq ".state")"
	if [ ${at_least_one_branch_is_stale} -eq 0 ]; then
		if [ "${issue_status}" != "OPEN" ]; then
			gh issue reopen "${issue_number}"
		fi
	else
		if [ "${issue_status}" != "CLOSED" ]; then
			gh issue close "${issue_number}"
		fi
	fi
}

function main {
	set -euo pipefail

	check_and_set_variables
	get_workflow_infos
	compute_issue_body
	create_or_update_issue
}

main
