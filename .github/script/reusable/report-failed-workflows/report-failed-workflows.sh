#!/usr/bin/env bash

# Used in .github/workflows/report-failed-workflows.yaml

# NOTE This script has not been ported to Go yet, as GitHub's GraphQL API lacks a good Go client library

function check_and_set_variables {
	if [ -z "${GITHUB_REPOSITORY:-}" ]; then
		echo "GITHUB_REPOSITORY is not set"
		exit 1
	fi
	export output_file="./dist/failed-workflows.md"
	export issue_title=":rotating_light: Failed workflows"
	export issue_body_identifier="<!-- gha:report-failed-workflows -->"
}

function get_workflow_infos() {
	export at_least_one_workflow_failed=0
}

function compute_issue_body {
	mkdir -p "$(dirname "${output_file}")"
	{
		echo "${issue_body_identifier}"
		echo "<!-- This issue is auto-generated by a workflow, do not edit manually -->"
		echo
		echo "## Failed workflows"
		echo
		echo "The following workflows have failed:"
		echo
		echo "| Workflow | Branch | Conclusion |"
		echo "|----------|--------|------------|"
		echo
		echo

		echo GH_TOKEN - "${GH_TOKEN}"
		echo WORKFLOW_URL - "${WORKFLOW_URL}"
		echo WORKFLOW_ID - "${WORKFLOW_ID}"
		echo NAME - "${NAME}"
		echo CONCLUSION - "${CONCLUSION}"
		echo HEAD_BRANCH - "${HEAD_BRANCH}"
		echo CREATED_AT - "${CREATED_AT}"
		echo HTML_URL - "${HTML_URL}"
		echo JOBS_URL - "${JOBS_URL}"
		echo LOGS_URL - "${LOGS_URL}"
		echo NODE_ID - "${NODE_ID}"
		echo RUN_NUMBER - "${RUN_NUMBER}"
		echo UPDATED_AT - "${UPDATED_AT}"
	} >"${output_file}"
}

function create_or_update_issue {
	local issue_number
	issue_number="$(gh api graphql -f query='
{
	search(query: "repo:'"${GITHUB_REPOSITORY}"' in:body '"${issue_body_identifier}"' in:title '"${issue_title}"'", type: ISSUE, first: 100) {
		edges {
			node {
				... on Issue {
					title
					body
					state
					number
				}
			}
		}
	}
}' | jq -r '.data.search.edges[0].node.number')"
	if [ "${issue_number}" == "null" ]; then
		issue_number="$(gh issue create --title "${issue_title}" -F "${output_file}" | grep -oP '(?<=/issues/)\d+')"
	else
		gh issue edit "${issue_number}" -F "${output_file}"
	fi
	gh issue pin "${issue_number}"
	local issue_status
	issue_status="$(gh issue view "${issue_number}" --json state --jq ".state")"
	if [ ${at_least_one_workflow_failed} -eq 0 ]; then
		if [ "${issue_status}" != "OPEN" ]; then
			gh issue reopen "${issue_number}"
		fi
	else
		if [ "${issue_status}" != "CLOSED" ]; then
			gh issue close "${issue_number}"
		fi
	fi
}

function main {
	set -euo pipefail

	check_and_set_variables
	get_workflow_infos
	compute_issue_body
	create_or_update_issue
}

main
