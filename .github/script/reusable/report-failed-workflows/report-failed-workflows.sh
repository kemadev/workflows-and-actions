#!/usr/bin/env bash

# Used in .github/workflows/report-failed-workflows.yaml

# NOTE This script has not been ported to Go yet, as GitHub's GraphQL API lacks a good Go client library

function check_and_set_variables {
	if [ -z "${GITHUB_REPOSITORY:-}" ]; then
		echo "GITHUB_REPOSITORY is not set"
		exit 1
	fi
	if [ -z "${HEAD_BRANCH:-}" ]; then
		echo "HEAD_BRANCH is not set"
		exit 1
	fi
	if [ -z "${WORKFLOW_NAME:-}" ]; then
		echo "WORKFLOW_NAME is not set"
		exit 1
	fi
	if [ -z "${WORKFLOW_RUN_TITLE:-}" ]; then
		echo "WORKFLOW_RUN_TITLE is not set"
		exit 1
	fi
	if [ -z "${CONCLUSION:-}" ]; then
		echo "CONCLUSION is not set"
		exit 1
	fi
	if [ -z "${HTML_URL:-}" ]; then
		echo "HTML_URL is not set"
		exit 1
	fi
	if [ -z "${CREATED_AT:-}" ]; then
		echo "CREATED_AT is not set"
		exit 1
	fi
	if [ -z "${UPDATED_AT:-}" ]; then
		echo "UPDATED_AT is not set"
		exit 1
	fi
	if [ -z "${ACTOR_TYPE:-}" ]; then
		echo "ACTOR_TYPE is not set"
		exit 1
	fi
	if [ -z "${ACTOR_HTML_URL:-}" ]; then
		echo "ACTOR_HTML_URL is not set"
		exit 1
	fi
	if [ -z "${TRIGGERING_ACTOR_TYPE:-}" ]; then
		echo "TRIGGERING_ACTOR_TYPE is not set"
		exit 1
	fi
	if [ -z "${TRIGGERING_ACTOR_HTML_URL:-}" ]; then
		echo "TRIGGERING_ACTOR_HTML_URL is not set"
		exit 1
	fi
	export output_file="./dist/failed-workflows.md"
	export issue_title=":rotating_light: Failed workflows"
	export issue_body_identifier="<!-- gha:report-failed-workflows -->"
	export current_workflow_delemiter_identifier="<!-- gha:report-failed-workflows-${WORKFLOW_NAME} -->"
}

function get_workflow_infos() {
	export at_least_one_workflow_failed=1
}

function compute_issue_body {
	local initial_issue_body
	initial_issue_body="$(gh issue view "${issue_number}" --json body --jq ".body")"
	local ARRAY_SEPARATOR="| -------- | ---------- | --- | ---- | ----- | ---------------- |"
	local all_workflows_lines
	all_workflows_lines="$(echo "${initial_issue_body}" | sed -n "/${ARRAY_SEPARATOR}/"',$p' | grep -v "${ARRAY_SEPARATOR}")"
	echo "All workflows lines: ${all_workflows_lines}"
	local current_workflow_delemiter_identifier_in_array_form="|${current_workflow_delemiter_identifier}"
	local workflow_lines_without_current_workflow
	workflow_lines_without_current_workflow="$(echo "${all_workflows_lines}" | sed -n "/${current_workflow_delemiter_identifier_in_array_form}/q;p")"
	echo "Workflow lines without current workflow: ${workflow_lines_without_current_workflow}"

	local created_at_human_readable
	created_at_human_readable="$(date -d "${CREATED_AT}" --utc)"
	local updated_at_human_readable
	updated_at_human_readable="$(date -d "${UPDATED_AT}" --utc)"

	local workflow_line
	workflow_line="${current_workflow_delemiter_identifier_in_array_form} ${WORKFLOW_NAME} | ${CONCLUSION} | [${WORKFLOW_RUN_TITLE}](${HTML_URL}) | ${created_at_human_readable} - ${updated_at_human_readable} | ${ACTOR_HTML_URL} | ${TRIGGERING_ACTOR_HTML_URL} |"
	local final_workflows_lines
	final_workflows_lines="$(echo -e "${workflow_lines_without_current_workflow}${workflow_line}")"
	mkdir -p "$(dirname "${output_file}")"
	{
		echo "${issue_body_identifier}"
		echo "<!-- This issue is auto-generated by a workflow, do not edit manually -->"
		echo
		echo "## Failed workflows"
		echo
		echo "The following workflows have failed:"
		echo
		echo "| Workflow | Conclusion | Run | Time | Actor | Triggering Actor |"
		echo "${ARRAY_SEPARATOR}"
		echo "${final_workflows_lines}"
	} >"${output_file}"
}

function create_or_update_issue {
	local issue_number
	issue_number="$(gh api graphql -f query='
{
	search(query: "repo:'"${GITHUB_REPOSITORY}"' in:body '"${issue_body_identifier}"' in:title '"${issue_title}"'", type: ISSUE, first: 100) {
		edges {
			node {
				... on Issue {
					title
					body
					state
					number
				}
			}
		}
	}
}' | jq -r '.data.search.edges[0].node.number')"
	if [ "${issue_number}" == "null" ]; then
		issue_number="$(gh issue create --title "${issue_title}" | grep -oP '(?<=/issues/)\d+')"
		export issue_number
	fi
	echo "Issue number: ${issue_number}"
	compute_issue_body
	gh issue edit "${issue_number}" -F "${output_file}"
	gh issue pin "${issue_number}"
	local issue_status
	issue_status="$(gh issue view "${issue_number}" --json state --jq ".state")"
	if [ ${at_least_one_workflow_failed} -eq 0 ]; then
		if [ "${issue_status}" != "OPEN" ]; then
			gh issue reopen "${issue_number}"
		fi
	else
		if [ "${issue_status}" != "CLOSED" ]; then
			gh issue close "${issue_number}"
		fi
	fi
}

function main {
	set -euo pipefail

	check_and_set_variables
	get_workflow_infos
	create_or_update_issue
}

main
